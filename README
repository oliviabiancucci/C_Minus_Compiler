Cameron Fraser
Olivia Biancucci

This is a parser implementation for the C- language created by Fei Song for CIS 4650. The project implementation is inspired by the implementation created and outlines in lectures and starter code given by Fei Song.

To build the CM.class executable file, navigate to the CMparser directory and type the command "make" in the terminal. This should generate the executable "CM.class" as well as the required files needed to parse the C- input files.

To execute the executable, type:

java -cp /usr/share/java/cup.jar:. CM [-a and/or -s] [insert CM file name here]

	When "-a" is specified, only the parsing is completed and the syntax tree is saved to an output file named "[inputted CM file name].abs" if the program finishes running.

	When "-s" is specified, both the parsing and semantic analysis is completed. The symbol table will be saved to an output file named "[inputted CM file name].sym" if the program finishes running. If there are syntatic errors, the program terminates right after parsing.

	When "-c" is specified, parsing, semantic analysis, and code generation will be completed. The generated code will be saved to an output file named "[inputted CM file name].tm" if the program finishes. Syntactic or semantic errors will cause the program to terminate before code generation.

	When all of the above flags are specified, all output files will be generated if there are no syntatic/semantic errors. If there are syntatic errors, only the syntax tree output file will be generated. If there are semantic errors, the code generation will not start.

There are 5 test files that come with the program, each with different possible errors and different structures to test the semantic analyzer. These files are c1.cm, c2.cm, c3.cm, c4.cm, and c5.cm. An example execution of c1.cm would look like "java -cp /usr/share/java/cup.jar:. CM -s c1.cm" and would generate the abstract syntax tree and the symbol table.
